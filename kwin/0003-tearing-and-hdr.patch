From 60d3b0f0bc74dd73b737c9228444324d075550a5 Mon Sep 17 00:00:00 2001
From: Xaver Hugl <xaver.hugl@gmail.com>
Date: Thu, 30 Jan 2025 13:14:08 +0100
Subject: [PATCH 1/3] backends/wayland: remove unused constant

I forgot to remove it when implementing presentation time support
---
 src/backends/wayland/wayland_output.cpp | 1 -
 1 file changed, 1 deletion(-)

diff --git a/src/backends/wayland/wayland_output.cpp b/src/backends/wayland/wayland_output.cpp
index 4db7859a6d3..de069deacea 100644
--- a/src/backends/wayland/wayland_output.cpp
+++ b/src/backends/wayland/wayland_output.cpp
@@ -34,7 +34,6 @@ namespace Wayland
 {
 
 using namespace KWayland::Client;
-static const int s_refreshRate = 60000; // TODO: can we get refresh rate data from Wayland host?
 
 WaylandCursor::WaylandCursor(WaylandBackend *backend)
     : m_surface(backend->display()->compositor()->createSurface())
-- 
GitLab


From a7923ea540990523e7d88f52728cc408ed8e1f77 Mon Sep 17 00:00:00 2001
From: Xaver Hugl <xaver.hugl@gmail.com>
Date: Thu, 30 Jan 2025 13:25:49 +0100
Subject: [PATCH 2/3] backends/wayland: add support for tearing

---
 src/backends/wayland/wayland_display.cpp | 11 +++++++++++
 src/backends/wayland/wayland_display.h   |  3 +++
 src/backends/wayland/wayland_output.cpp  | 20 +++++++++++++++++++-
 src/backends/wayland/wayland_output.h    |  2 ++
 4 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/src/backends/wayland/wayland_display.cpp b/src/backends/wayland/wayland_display.cpp
index 7b6240e9b47..a6b82d3cd5b 100644
--- a/src/backends/wayland/wayland_display.cpp
+++ b/src/backends/wayland/wayland_display.cpp
@@ -36,6 +36,7 @@
 #include "wayland-pointer-gestures-unstable-v1-server-protocol.h"
 #include "wayland-presentation-time-client-protocol.h"
 #include "wayland-relative-pointer-unstable-v1-client-protocol.h"
+#include "wayland-tearing-control-v1-client-protocol.h"
 #include "wayland-xdg-decoration-unstable-v1-client-protocol.h"
 #include "wayland-xdg-shell-client-protocol.h"
 
@@ -338,6 +339,9 @@ WaylandDisplay::~WaylandDisplay()
     if (m_presentationTime) {
         wp_presentation_destroy(m_presentationTime);
     }
+    if (m_tearingControl) {
+        wp_tearing_control_manager_v1_destroy(m_tearingControl);
+    }
     if (m_registry) {
         wl_registry_destroy(m_registry);
     }
@@ -429,6 +433,11 @@ wp_presentation *WaylandDisplay::presentationTime() const
     return m_presentationTime;
 }
 
+wp_tearing_control_manager_v1 *WaylandDisplay::tearingControl() const
+{
+    return m_tearingControl;
+}
+
 void WaylandDisplay::registry_global(void *data, wl_registry *registry, uint32_t name, const char *interface, uint32_t version)
 {
     WaylandDisplay *display = static_cast<WaylandDisplay *>(data);
@@ -467,6 +476,8 @@ void WaylandDisplay::registry_global(void *data, wl_registry *registry, uint32_t
         display->m_linuxDmabuf = std::make_unique<WaylandLinuxDmabufV1>(registry, name, std::min(version, 4u));
     } else if (strcmp(interface, wp_presentation_interface.name) == 0) {
         display->m_presentationTime = reinterpret_cast<wp_presentation *>(wl_registry_bind(registry, name, &wp_presentation_interface, std::min(version, 2u)));
+    } else if (strcmp(interface, wp_tearing_control_v1_interface.name) == 0) {
+        display->m_tearingControl = reinterpret_cast<wp_tearing_control_manager_v1 *>(wl_registry_bind(registry, name, &wp_tearing_control_v1_interface, 1));
     }
 }
 
diff --git a/src/backends/wayland/wayland_display.h b/src/backends/wayland/wayland_display.h
index 1316ce8ea57..5e33dd45bbe 100644
--- a/src/backends/wayland/wayland_display.h
+++ b/src/backends/wayland/wayland_display.h
@@ -16,6 +16,7 @@ struct wl_registry;
 struct wl_shm;
 struct zwp_linux_dmabuf_v1;
 struct wp_presentation;
+struct wp_tearing_control_manager_v1;
 
 namespace KWayland
 {
@@ -78,6 +79,7 @@ public:
     KWayland::Client::XdgShell *xdgShell() const;
     WaylandLinuxDmabufV1 *linuxDmabuf() const;
     wp_presentation *presentationTime() const;
+    wp_tearing_control_manager_v1 *tearingControl() const;
 
 public Q_SLOTS:
     void flush();
@@ -90,6 +92,7 @@ private:
     wl_registry *m_registry = nullptr;
     wl_shm *m_shm = nullptr;
     wp_presentation *m_presentationTime = nullptr;
+    wp_tearing_control_manager_v1 *m_tearingControl = nullptr;
     std::unique_ptr<WaylandEventThread> m_eventThread;
     std::unique_ptr<WaylandLinuxDmabufV1> m_linuxDmabuf;
     std::unique_ptr<KWayland::Client::Compositor> m_compositor;
diff --git a/src/backends/wayland/wayland_output.cpp b/src/backends/wayland/wayland_output.cpp
index de069deacea..faa06445b42 100644
--- a/src/backends/wayland/wayland_output.cpp
+++ b/src/backends/wayland/wayland_output.cpp
@@ -21,6 +21,7 @@
 #include <KWayland/Client/xdgdecoration.h>
 
 #include "wayland-presentation-time-client-protocol.h"
+#include "wayland-tearing-control-v1-client-protocol.h"
 
 #include <KLocalizedString>
 
@@ -107,10 +108,15 @@ WaylandOutput::WaylandOutput(const QString &name, WaylandBackend *backend)
         m_xdgDecoration->setMode(KWayland::Client::XdgDecoration::Mode::ServerSide);
     }
 
+    Capabilities caps = Capability::Dpms;
+    if (auto manager = backend->display()->tearingControl()) {
+        caps |= Capability::Tearing;
+        m_tearingControl = wp_tearing_control_manager_v1_get_tearing_control(manager, *m_surface);
+    }
     setInformation(Information{
         .name = name,
         .model = name,
-        .capabilities = Capability::Dpms,
+        .capabilities = caps,
     });
 
     m_turnOffTimer.setSingleShot(true);
@@ -144,6 +150,10 @@ WaylandOutput::~WaylandOutput()
         wp_presentation_feedback_destroy(m_presentationFeedback);
         m_presentationFeedback = nullptr;
     }
+    if (m_tearingControl) {
+        wp_tearing_control_v1_destroy(m_tearingControl);
+        m_tearingControl = nullptr;
+    }
     m_xdgDecoration.reset();
     m_xdgShellSurface.reset();
     m_surface.reset();
@@ -192,6 +202,14 @@ static constexpr struct wp_presentation_feedback_listener s_presentationListener
 void WaylandOutput::present(const std::shared_ptr<OutputFrame> &frame)
 {
     Q_ASSERT(m_presentationBuffer);
+    if (m_tearingControl) {
+        if (frame->presentationMode() == PresentationMode::Async) {
+            wp_tearing_control_v1_set_presentation_hint(m_tearingControl, WP_TEARING_CONTROL_V1_PRESENTATION_HINT_ASYNC);
+        } else {
+            wp_tearing_control_v1_set_presentation_hint(m_tearingControl, WP_TEARING_CONTROL_V1_PRESENTATION_HINT_VSYNC);
+        }
+        m_renderLoop->setPresentationMode(frame->presentationMode());
+    }
     m_surface->attachBuffer(m_presentationBuffer);
     m_surface->damage(frame->damage());
     m_surface->setScale(std::ceil(scale()));
diff --git a/src/backends/wayland/wayland_output.h b/src/backends/wayland/wayland_output.h
index b30630aa79f..0ee2dd337ff 100644
--- a/src/backends/wayland/wayland_output.h
+++ b/src/backends/wayland/wayland_output.h
@@ -28,6 +28,7 @@ class XdgDecoration;
 
 struct wl_buffer;
 struct wp_presentation_feedback;
+struct wp_tearing_control_v1;
 
 namespace KWin
 {
@@ -110,6 +111,7 @@ private:
     QSize m_pendingConfigureSize;
     QTimer m_configureThrottleTimer;
     wp_presentation_feedback *m_presentationFeedback = nullptr;
+    wp_tearing_control_v1 *m_tearingControl = nullptr;
     uint32_t m_refreshRate = 60'000;
 };
 
-- 
GitLab


From 975cc8ab07625e165e410ab9ef362ca004a063f3 Mon Sep 17 00:00:00 2001
From: Xaver Hugl <xaver.hugl@gmail.com>
Date: Thu, 30 Jan 2025 15:56:39 +0100
Subject: [PATCH 3/3] backends/wayland: add support for HDR

As long as the host compositor supports BT2020 and custom luminance levels, we can
trivially enable HDR for the nested backend.
---
 src/backends/wayland/CMakeLists.txt           |   1 +
 src/backends/wayland/color_manager.cpp        | 159 ++++++++++++++++++
 src/backends/wayland/color_manager.h          |  45 +++++
 src/backends/wayland/wayland_display.cpp      |  11 ++
 src/backends/wayland/wayland_display.h        |   3 +
 src/backends/wayland/wayland_egl_backend.cpp  |   2 +-
 src/backends/wayland/wayland_output.cpp       |  51 ++++++
 src/backends/wayland/wayland_output.h         |   4 +
 .../wayland/wayland_qpainter_backend.cpp      |   2 +-
 9 files changed, 276 insertions(+), 2 deletions(-)
 create mode 100644 src/backends/wayland/color_manager.cpp
 create mode 100644 src/backends/wayland/color_manager.h

diff --git a/src/backends/wayland/CMakeLists.txt b/src/backends/wayland/CMakeLists.txt
index 99cab06304a..1d93860358f 100644
--- a/src/backends/wayland/CMakeLists.txt
+++ b/src/backends/wayland/CMakeLists.txt
@@ -1,4 +1,5 @@
 target_sources(kwin PRIVATE
+    color_manager.cpp
     wayland_backend.cpp
     wayland_display.cpp
     wayland_egl_backend.cpp
diff --git a/src/backends/wayland/color_manager.cpp b/src/backends/wayland/color_manager.cpp
new file mode 100644
index 00000000000..8c7d1cfbf2e
--- /dev/null
+++ b/src/backends/wayland/color_manager.cpp
@@ -0,0 +1,159 @@
+/*
+    SPDX-FileCopyrightText: 2025 Xaver Hugl <xaver.hugl@gmail.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+#include "color_manager.h"
+
+namespace KWin
+{
+namespace Wayland
+{
+
+void ColorManager::supportedFeature(void *data, xx_color_manager_v4 *manager, uint32_t feature)
+{
+    static_cast<ColorManager *>(data)->m_features.push_back(static_cast<xx_color_manager_v4_feature>(feature));
+}
+
+void ColorManager::supportedIntent(void *data, xx_color_manager_v4 *manager, uint32_t intent)
+{
+    // unused
+}
+
+void ColorManager::supportedPrimaries(void *data, xx_color_manager_v4 *manager, uint32_t primaries)
+{
+    static_cast<ColorManager *>(data)->m_primaries.push_back(static_cast<xx_color_manager_v4_primaries>(primaries));
+}
+
+void ColorManager::supportedTransferFunction(void *data, xx_color_manager_v4 *manager, uint32_t transferFunction)
+{
+    static_cast<ColorManager *>(data)->m_transferFunctions.push_back(static_cast<xx_color_manager_v4_transfer_function>(transferFunction));
+}
+
+constexpr xx_color_manager_v4_listener ColorManager::s_listener{
+    .supported_intent = supportedIntent,
+    .supported_feature = supportedFeature,
+    .supported_tf_named = supportedTransferFunction,
+    .supported_primaries_named = supportedPrimaries,
+};
+
+ColorManager::ColorManager(xx_color_manager_v4 *obj)
+    : m_object(obj)
+{
+    xx_color_manager_v4_add_listener(obj, &s_listener, this);
+}
+
+ColorManager::~ColorManager()
+{
+    xx_color_manager_v4_destroy(m_object);
+}
+
+bool ColorManager::supportsFeature(xx_color_manager_v4_feature feature)
+{
+    return m_features.contains(feature);
+}
+
+bool ColorManager::supportsPrimaries(xx_color_manager_v4_primaries primaries)
+{
+    return m_primaries.contains(primaries);
+}
+
+bool ColorManager::supportsTransferFunction(xx_color_manager_v4_transfer_function tf)
+{
+    return m_transferFunctions.contains(tf);
+}
+
+xx_color_manager_v4 *ColorManager::object() const
+{
+    return m_object;
+}
+
+static std::optional<uint32_t> kwinPrimariesToProtoPrimaires(const Colorimetry &color)
+{
+    const auto primaries = color.name();
+    if (!primaries) {
+        return std::nullopt;
+    }
+    switch (*primaries) {
+    case NamedColorimetry::BT709:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_SRGB;
+    case NamedColorimetry::PAL_M:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_PAL_M;
+    case NamedColorimetry::PAL:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_PAL;
+    case NamedColorimetry::NTSC:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_NTSC;
+    case NamedColorimetry::GenericFilm:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_GENERIC_FILM;
+    case NamedColorimetry::BT2020:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_BT2020;
+    case NamedColorimetry::CIEXYZ:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_CIE1931_XYZ;
+    case NamedColorimetry::DCIP3:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_DCI_P3;
+    case NamedColorimetry::DisplayP3:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_DISPLAY_P3;
+    case NamedColorimetry::AdobeRGB:
+        return XX_COLOR_MANAGER_V4_PRIMARIES_ADOBE_RGB;
+    case NamedColorimetry::CIEXYZD50:
+        return std::nullopt;
+    }
+    Q_UNREACHABLE();
+}
+
+static uint32_t kwinTFtoProtoTF(TransferFunction tf)
+{
+    switch (tf.type) {
+    case TransferFunction::sRGB:
+        return xx_color_manager_v4_transfer_function::XX_COLOR_MANAGER_V4_TRANSFER_FUNCTION_SRGB;
+    case TransferFunction::linear:
+        return xx_color_manager_v4_transfer_function::XX_COLOR_MANAGER_V4_TRANSFER_FUNCTION_LINEAR;
+    case TransferFunction::PerceptualQuantizer:
+        return xx_color_manager_v4_transfer_function::XX_COLOR_MANAGER_V4_TRANSFER_FUNCTION_ST2084_PQ;
+    case TransferFunction::gamma22:
+        return xx_color_manager_v4_transfer_function::XX_COLOR_MANAGER_V4_TRANSFER_FUNCTION_GAMMA22;
+    }
+    Q_UNREACHABLE();
+}
+
+static constexpr double s_primariesUnit = 1.0 / 10'000.0;
+
+xx_image_description_v4 *ColorManager::createImageDescription(const ColorDescription &color)
+{
+    const auto encode = [](double primary) {
+        return std::round(primary / s_primariesUnit);
+    };
+
+    auto creator = xx_color_manager_v4_new_parametric_creator(object());
+    if (auto primaries = kwinPrimariesToProtoPrimaires(color.containerColorimetry())) {
+        xx_image_description_creator_params_v4_set_primaries_named(creator, *primaries);
+    } else {
+        const auto &c = color.containerColorimetry();
+        xx_image_description_creator_params_v4_set_primaries(creator,
+                                                             encode(c.red().toxy().x), encode(c.red().toxy().y),
+                                                             encode(c.green().toxy().x), encode(c.green().toxy().y),
+                                                             encode(c.blue().toxy().x), encode(c.blue().toxy().y),
+                                                             encode(c.white().toxy().x), encode(c.white().toxy().y));
+    }
+    xx_image_description_creator_params_v4_set_tf_named(creator, kwinTFtoProtoTF(color.transferFunction()));
+    if (supportsFeature(XX_COLOR_MANAGER_V4_FEATURE_SET_LUMINANCES)) {
+        xx_image_description_creator_params_v4_set_luminances(creator, std::round(10'000 * color.transferFunction().minLuminance), std::round(color.transferFunction().maxLuminance), std::round(color.referenceLuminance()));
+    }
+    if (supportsFeature(XX_COLOR_MANAGER_V4_FEATURE_SET_MASTERING_DISPLAY_PRIMARIES) && color.masteringColorimetry().has_value()) {
+        const auto &c = *color.masteringColorimetry();
+        xx_image_description_creator_params_v4_set_mastering_display_primaries(creator,
+                                                                               encode(c.red().toxy().x), encode(c.red().toxy().y),
+                                                                               encode(c.green().toxy().x), encode(c.green().toxy().y),
+                                                                               encode(c.blue().toxy().x), encode(c.blue().toxy().y),
+                                                                               encode(c.white().toxy().x), encode(c.white().toxy().y));
+    }
+    if (supportsFeature(XX_COLOR_MANAGER_V4_FEATURE_SET_MASTERING_DISPLAY_PRIMARIES) && color.maxHdrLuminance()) {
+        xx_image_description_creator_params_v4_set_mastering_luminance(creator, std::round(10'000 * color.minLuminance()), std::round(*color.maxHdrLuminance()));
+    }
+    // TODO this assumes that the compositor immediately creates the image description
+    // doesn't matter for KWin, but might be nice to fix for other compositors
+    return xx_image_description_creator_params_v4_create(creator);
+}
+
+}
+}
diff --git a/src/backends/wayland/color_manager.h b/src/backends/wayland/color_manager.h
new file mode 100644
index 00000000000..3c6815efb33
--- /dev/null
+++ b/src/backends/wayland/color_manager.h
@@ -0,0 +1,45 @@
+/*
+    SPDX-FileCopyrightText: 2025 Xaver Hugl <xaver.hugl@gmail.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+#pragma once
+
+#include "core/colorspace.h"
+#include "wayland-xx-color-management-v4-client-protocol.h"
+
+#include <QList>
+
+namespace KWin
+{
+namespace Wayland
+{
+
+class ColorManager
+{
+public:
+    explicit ColorManager(xx_color_manager_v4 *obj);
+    ~ColorManager();
+
+    bool supportsFeature(xx_color_manager_v4_feature feature);
+    bool supportsPrimaries(xx_color_manager_v4_primaries primaries);
+    bool supportsTransferFunction(xx_color_manager_v4_transfer_function tf);
+
+    xx_color_manager_v4 *object() const;
+    xx_image_description_v4 *createImageDescription(const ColorDescription &color);
+
+private:
+    static const xx_color_manager_v4_listener s_listener;
+    static void supportedFeature(void *data, xx_color_manager_v4 *manager, uint32_t feature);
+    static void supportedIntent(void *data, xx_color_manager_v4 *manager, uint32_t intent);
+    static void supportedPrimaries(void *data, xx_color_manager_v4 *manager, uint32_t primaries);
+    static void supportedTransferFunction(void *data, xx_color_manager_v4 *manager, uint32_t transferFunction);
+
+    xx_color_manager_v4 *const m_object;
+    QList<xx_color_manager_v4_feature> m_features;
+    QList<xx_color_manager_v4_primaries> m_primaries;
+    QList<xx_color_manager_v4_transfer_function> m_transferFunctions;
+};
+
+}
+}
diff --git a/src/backends/wayland/wayland_display.cpp b/src/backends/wayland/wayland_display.cpp
index a6b82d3cd5b..f5df49a6613 100644
--- a/src/backends/wayland/wayland_display.cpp
+++ b/src/backends/wayland/wayland_display.cpp
@@ -30,6 +30,8 @@
 #include <wayland-client.h>
 #include <xf86drm.h>
 
+#include "color_manager.h"
+
 // Generated in src/wayland.
 #include "wayland-linux-dmabuf-unstable-v1-client-protocol.h"
 #include "wayland-pointer-constraints-unstable-v1-client-protocol.h"
@@ -332,6 +334,7 @@ WaylandDisplay::~WaylandDisplay()
     m_xdgDecorationManager.reset();
     m_xdgShell.reset();
     m_linuxDmabuf.reset();
+    m_colorManager.reset();
 
     if (m_shm) {
         wl_shm_destroy(m_shm);
@@ -438,6 +441,11 @@ wp_tearing_control_manager_v1 *WaylandDisplay::tearingControl() const
     return m_tearingControl;
 }
 
+ColorManager *WaylandDisplay::colorManager() const
+{
+    return m_colorManager.get();
+}
+
 void WaylandDisplay::registry_global(void *data, wl_registry *registry, uint32_t name, const char *interface, uint32_t version)
 {
     WaylandDisplay *display = static_cast<WaylandDisplay *>(data);
@@ -478,6 +486,9 @@ void WaylandDisplay::registry_global(void *data, wl_registry *registry, uint32_t
         display->m_presentationTime = reinterpret_cast<wp_presentation *>(wl_registry_bind(registry, name, &wp_presentation_interface, std::min(version, 2u)));
     } else if (strcmp(interface, wp_tearing_control_v1_interface.name) == 0) {
         display->m_tearingControl = reinterpret_cast<wp_tearing_control_manager_v1 *>(wl_registry_bind(registry, name, &wp_tearing_control_v1_interface, 1));
+    } else if (strcmp(interface, xx_color_manager_v4_interface.name) == 0) {
+        const auto global = reinterpret_cast<xx_color_manager_v4 *>(wl_registry_bind(registry, name, &xx_color_manager_v4_interface, 1));
+        display->m_colorManager = std::make_unique<ColorManager>(global);
     }
 }
 
diff --git a/src/backends/wayland/wayland_display.h b/src/backends/wayland/wayland_display.h
index 5e33dd45bbe..5ed778bb9b6 100644
--- a/src/backends/wayland/wayland_display.h
+++ b/src/backends/wayland/wayland_display.h
@@ -39,6 +39,7 @@ namespace Wayland
 
 class WaylandEventThread;
 class WaylandLinuxDmabufFeedbackV1;
+class ColorManager;
 
 class WaylandLinuxDmabufV1
 {
@@ -80,6 +81,7 @@ public:
     WaylandLinuxDmabufV1 *linuxDmabuf() const;
     wp_presentation *presentationTime() const;
     wp_tearing_control_manager_v1 *tearingControl() const;
+    ColorManager *colorManager() const;
 
 public Q_SLOTS:
     void flush();
@@ -93,6 +95,7 @@ private:
     wl_shm *m_shm = nullptr;
     wp_presentation *m_presentationTime = nullptr;
     wp_tearing_control_manager_v1 *m_tearingControl = nullptr;
+    std::unique_ptr<ColorManager> m_colorManager;
     std::unique_ptr<WaylandEventThread> m_eventThread;
     std::unique_ptr<WaylandLinuxDmabufV1> m_linuxDmabuf;
     std::unique_ptr<KWayland::Client::Compositor> m_compositor;
diff --git a/src/backends/wayland/wayland_egl_backend.cpp b/src/backends/wayland/wayland_egl_backend.cpp
index 9576b62b737..8657cb0e11c 100644
--- a/src/backends/wayland/wayland_egl_backend.cpp
+++ b/src/backends/wayland/wayland_egl_backend.cpp
@@ -91,7 +91,7 @@ std::optional<OutputLayerBeginFrameInfo> WaylandEglPrimaryLayer::doBeginFrame()
     m_query = std::make_unique<GLRenderTimeQuery>(m_backend->openglContextRef());
     m_query->begin();
     return OutputLayerBeginFrameInfo{
-        .renderTarget = RenderTarget(m_buffer->framebuffer()),
+        .renderTarget = RenderTarget(m_buffer->framebuffer(), m_output->colorDescription()),
         .repaint = repair,
     };
 }
diff --git a/src/backends/wayland/wayland_output.cpp b/src/backends/wayland/wayland_output.cpp
index faa06445b42..3c542f2ddd0 100644
--- a/src/backends/wayland/wayland_output.cpp
+++ b/src/backends/wayland/wayland_output.cpp
@@ -7,7 +7,9 @@
     SPDX-License-Identifier: GPL-2.0-or-later
 */
 #include "wayland_output.h"
+#include "color_manager.h"
 #include "compositor.h"
+#include "core/outputconfiguration.h"
 #include "core/outputlayer.h"
 #include "core/renderbackend.h"
 #include "core/renderloop_p.h"
@@ -113,6 +115,17 @@ WaylandOutput::WaylandOutput(const QString &name, WaylandBackend *backend)
         caps |= Capability::Tearing;
         m_tearingControl = wp_tearing_control_manager_v1_get_tearing_control(manager, *m_surface);
     }
+    if (auto manager = backend->display()->colorManager()) {
+        const bool supportsHDR = manager->supportsFeature(XX_COLOR_MANAGER_V4_FEATURE_PARAMETRIC)
+            && manager->supportsFeature(XX_COLOR_MANAGER_V4_FEATURE_SET_LUMINANCES)
+            && manager->supportsPrimaries(XX_COLOR_MANAGER_V4_PRIMARIES_BT2020)
+            && manager->supportsTransferFunction(XX_COLOR_MANAGER_V4_TRANSFER_FUNCTION_GAMMA22);
+        if (supportsHDR) {
+            caps |= Capability::HighDynamicRange;
+            caps |= Capability::WideColorGamut;
+            m_colorSurface = xx_color_manager_v4_get_surface(manager->object(), *m_surface);
+        }
+    }
     setInformation(Information{
         .name = name,
         .model = name,
@@ -154,6 +167,10 @@ WaylandOutput::~WaylandOutput()
         wp_tearing_control_v1_destroy(m_tearingControl);
         m_tearingControl = nullptr;
     }
+    if (m_colorSurface) {
+        xx_color_management_surface_v4_destroy(m_colorSurface);
+        m_colorSurface = nullptr;
+    }
     m_xdgDecoration.reset();
     m_xdgShellSurface.reset();
     m_surface.reset();
@@ -253,6 +270,40 @@ void WaylandOutput::framePresented(std::chrono::nanoseconds timestamp, uint32_t
     }
 }
 
+void WaylandOutput::applyChanges(const OutputConfiguration &config)
+{
+    const auto props = config.constChangeSet(this);
+    if (!props) {
+        return;
+    }
+    State next = m_state;
+    next.enabled = props->enabled.value_or(m_state.enabled);
+    next.transform = props->transform.value_or(m_state.transform);
+    next.position = props->pos.value_or(m_state.position);
+    next.scale = props->scale.value_or(m_state.scale);
+    next.desiredModeSize = props->desiredModeSize.value_or(m_state.desiredModeSize);
+    next.desiredModeRefreshRate = props->desiredModeRefreshRate.value_or(m_state.desiredModeRefreshRate);
+    next.highDynamicRange = props->highDynamicRange.value_or(m_state.highDynamicRange);
+    next.wideColorGamut = props->wideColorGamut.value_or(m_state.wideColorGamut);
+    // TODO unconditionally use the primaries + luminance ranges from the preferred image description instead of this?
+    const auto tf = next.highDynamicRange ? TransferFunction(TransferFunction::gamma22, 0, 1000) : TransferFunction(TransferFunction::gamma22);
+    next.colorDescription = ColorDescription{
+        next.wideColorGamut ? NamedColorimetry::BT2020 : NamedColorimetry::BT709,
+        tf,
+        next.highDynamicRange ? 203 : TransferFunction::defaultReferenceLuminanceFor(TransferFunction::gamma22),
+        tf.minLuminance,
+        tf.maxLuminance,
+        tf.maxLuminance,
+    };
+    setState(next);
+
+    if (m_colorSurface) {
+        const auto imageDescription = m_backend->display()->colorManager()->createImageDescription(next.colorDescription);
+        xx_color_management_surface_v4_set_image_description(m_colorSurface, imageDescription, XX_COLOR_MANAGER_V4_RENDER_INTENT_PERCEPTUAL);
+        xx_image_description_v4_destroy(imageDescription);
+    }
+}
+
 bool WaylandOutput::isReady() const
 {
     return m_ready;
diff --git a/src/backends/wayland/wayland_output.h b/src/backends/wayland/wayland_output.h
index 0ee2dd337ff..759a7f3145c 100644
--- a/src/backends/wayland/wayland_output.h
+++ b/src/backends/wayland/wayland_output.h
@@ -29,6 +29,7 @@ class XdgDecoration;
 struct wl_buffer;
 struct wp_presentation_feedback;
 struct wp_tearing_control_v1;
+struct xx_color_management_surface_v4;
 
 namespace KWin
 {
@@ -90,6 +91,8 @@ public:
     void frameDiscarded();
     void framePresented(std::chrono::nanoseconds timestamp, uint32_t refreshRate);
 
+    void applyChanges(const OutputConfiguration &config) override;
+
 private:
     void handleConfigure(const QSize &size, KWayland::Client::XdgShellSurface::States states, quint32 serial);
     void updateWindowTitle();
@@ -112,6 +115,7 @@ private:
     QTimer m_configureThrottleTimer;
     wp_presentation_feedback *m_presentationFeedback = nullptr;
     wp_tearing_control_v1 *m_tearingControl = nullptr;
+    xx_color_management_surface_v4 *m_colorSurface = nullptr;
     uint32_t m_refreshRate = 60'000;
 };
 
diff --git a/src/backends/wayland/wayland_qpainter_backend.cpp b/src/backends/wayland/wayland_qpainter_backend.cpp
index 0733130436b..349ff417451 100644
--- a/src/backends/wayland/wayland_qpainter_backend.cpp
+++ b/src/backends/wayland/wayland_qpainter_backend.cpp
@@ -55,7 +55,7 @@ std::optional<OutputLayerBeginFrameInfo> WaylandQPainterPrimaryLayer::doBeginFra
 
     m_renderTime = std::make_unique<CpuRenderTimeQuery>();
     return OutputLayerBeginFrameInfo{
-        .renderTarget = RenderTarget(m_back->view()->image()),
+        .renderTarget = RenderTarget(m_back->view()->image(), m_output->colorDescription()),
         .repaint = accumulateDamage(m_back->age()),
     };
 }
-- 
GitLab

