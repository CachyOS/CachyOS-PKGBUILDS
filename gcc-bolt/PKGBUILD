# Maintainer: Giancarlo Razzolini <grazzolini@archlinux.org>
# Maintainer: Frederik Schwan <freswa at archlinux dot org>
# Contributor:  Bart≈Çomiej Piotrowski <bpiotrowski@archlinux.org>
# Contributor: Allan McRae <allan@archlinux.org>
# Contributor: Daniel Kozak <kozzi11@gmail.com>

# toolchain build order: linux-api-headers->glibc->binutils->gcc->glibc->binutils->gcc
# NOTE: libtool requires rebuilt with each new gcc version

pkgname=(gcc-bolt)
pkgver=13.2.1
_majorver=${pkgver%%.*}
_commit=79d0dd71302daf51448a07e42ab77a397e2cf0a8
pkgrel=1
pkgdesc='The GNU Compiler Collection'
arch=(x86_64)
license=(GPL3 LGPL FDL custom)
url='https://gcc.gnu.org'
makedepends=(
    binutils
    git
    libisl
    libmpc
    python
    zstd
    libisl
    cloog
)
checkdepends=(
    dejagnu
    expect
    inetutils
    python-pytest
    tcl
    libisl
    cloog
)
options=(!emptydirs !lto)
_libdir=usr/lib/gcc/$CHOST/13.2.1
source=(git+https://sourceware.org/git/gcc.git#commit=${_commit}
    https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.7.3.tar.xz
    c89 c99
    gcc-ada-repro.patch
    tune-inline.patch
    fix-asan-allocator-aslr.patch
)
validpgpkeys=(F3691687D867B81B51CE07D9BBE43771487328A9 # bpiotrowski@archlinux.org
    86CFFCA918CF3AF47147588051E8B148A9999C34           # evangelos@foutrelis.com
    13975A70E63C361C73AE69EF6EEB81F8981C74C7           # richard.guenther@gmail.com
    D3A93CAD751C2AF4F8C7AD516C35B99309B5FA62)          # Jakub Jelinek <jakub@redhat.com>
sha256sums=('SKIP'
    'de48736f6e4153f03d0a5d38ceb6c6fdb7f054e8f47ddd6af0a3dbf14f27b931'
    '2513c6d9984dd0a2058557bf00f06d8d5181734e41dcfe07be7ed86f2959622a'
    '1773f5137f08ac1f48f0f7297e324d5d868d55201c03068670ee4602babdef2f')
prepare() {
    [[ ! -d gcc ]] && ln -s gcc-${pkgver/+/-} gcc
    cd gcc

    # Do not run fixincludes
    sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

    # Arch Linux installs x86_64 libraries /lib
    sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64

    patch -Np3 -d libsanitizer/ <"$srcdir/fix-asan-allocator-aslr.patch"

    # Reproducible gcc-ada
    patch -Np0 <"$srcdir/gcc-ada-repro.patch"
    patch -Np1 <"$srcdir/tune-inline.patch"

    mkdir -p "$srcdir/gcc-build"
    mkdir -p "$srcdir/libgccjit-build"
}

build() {
    local _confflags=(
        --prefix=/usr
        --libdir=/usr/lib
        --libexecdir=/usr/lib
        --mandir=/usr/share/man
        --infodir=/usr/share/info
        --with-build-config=bootstrap-O3
        --with-linker-hash-style=gnu
        --with-system-zlib
        --enable-__cxa_atexit
        --enable-cet=auto
        --enable-checking=release
        --enable-clocale=gnu
        --enable-default-pie
        --enable-default-ssp
        --enable-gnu-indirect-function
        --enable-gnu-unique-object
        --enable-libstdcxx-backtrace
        --enable-link-serialization=1
        --enable-linker-build-id
        --enable-lto
        --disable-multilib
        --enable-plugin
        --enable-shared
        --enable-threads=posix
        --disable-libssp
        --enable-libstdcxx-pch
        --disable-werror
        --with-cloog
        --with-isl
        --disable-vtable-verify
        --enable-linux-futex
        --enable-version-specific-runtime-libs
    )

    cd gcc-build

    CFLAGS=${CFLAGS/-Werror=format-security/}
    CXXFLAGS=${CXXFLAGS/-Werror=format-security/}
    export CFLAGS+=" -fno-semantic-interposition"
    export CXXFLAGS+=" -fno-semantic-interposition"
    export CFLAGS+=" -fno-reorder-blocks-and-partition"
    export CXXFLAGS+=" -fno-reorder-blocks-and-partition"
    export LDFLAGS+=",--emit-relocs"
    "$srcdir/gcc/configure" \
        --enable-languages=c,c++,lto \
        --enable-bootstrap \
        "${_confflags[@]:?_confflags unset}"


    make -O STAGE1_CFLAGS="-O3" \
        BOOT_CFLAGS="$CFLAGS" \
        BOOT_LDFLAGS="$LDFLAGS" \
        LDFLAGS_FOR_TARGET="$LDFLAGS" \
        profiledbootstrap

    # Build libgccjit separately, to avoid building all compilers with --enable-host-shared
    # which brings a performance penalty
    cd "${srcdir}"/libgccjit-build

    "$srcdir/gcc/configure" \
        --enable-languages=jit \
        --disable-bootstrap \
        --enable-host-shared \
        "${_confflags[@]:?_confflags unset}"

    # see https://bugs.archlinux.org/task/71777 for rationale re *FLAGS handling
    make -O STAGE1_CFLAGS="-O3" \
        BOOT_CFLAGS="$CFLAGS" \
        BOOT_LDFLAGS="$LDFLAGS" \
        LDFLAGS_FOR_TARGET="$LDFLAGS" \
        all-gcc

    cp -a gcc/libgccjit.so* ../gcc-build/gcc/

    BOLTDIR="${srcdir}"/gcc-bolt
    mkdir -p "${BOLTDIR}"
    cd $srcdir/gcc-build
    make DESTDIR="$BOLTDIR" install

    PATH="$BOLTDIR/usr/bin:$PATH"

    cd $srcdir/linux-6.7.3
    make distclean
    yes "" | make oldconfig

    perf record -o ${srcdir}/cc1.data --max-size=1G -F 1700 -e cycles:u -j any,u -- make -j$(nproc) || true

    cd "${srcdir}"

    mkdir -p "${srcdir}/gcc-bolted"
    cd "${srcdir}/gcc-bolted"
    "${srcdir}/gcc/configure" \
        --enable-languages=c,c++,lto \
        --enable-bootstrap \
        "${_confflags[@]:?_confflags unset}"

    perf record -o ${srcdir}/cc1plus.data --max-size=1G -F 1700 -e cycles:u -j any,u -- make -j$(nproc) all-gcc || true

}

package_gcc-bolt() {
    pkgdesc="The GNU Compiler Collection - C and C++ frontends"
    depends=("gcc-libs=$pkgver-$pkgrel" 'binutils>=2.28' libmpc zstd libisl.so)
    optdepends=('lib32-gcc-libs: for generating code for 32-bit ABI')
    provides=($pkgname-multilib)
    replaces=($pkgname-multilib)
    options=(!emptydirs staticlibs !strip !lto)

    cd gcc-build

    make DESTDIR="$pkgdir" install

    LD_PRELOAD=/usr/lib/libjemalloc.so perf2bolt $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1 \
        -p $srcdir/cc1.data \
        -o $srcdir/cc1.fdata

    LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1 \
        --data $srcdir/cc1.fdata \
        -o $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1.bolt \
        -reorder-blocks=ext-tsp \
        -reorder-functions=cdsort \
        -split-functions \
        -split-all-cold \
        -split-eh \
        -dyno-stats \
        -icf=1 \
        -use-gnu-stack \
        -plt=hot || (
        echo "Could not optimize binary for cc1"
        exit 1
    )

    LD_PRELOAD=/usr/lib/libjemalloc.so perf2bolt $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus \
        -p $srcdir/cc1plus.data \
        -o $srcdir/cc1plus.fdata

    LD_PRELOAD=/usr/lib/libjemalloc.so llvm-bolt $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus \
        --data $srcdir/cc1plus.fdata \
        -o $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus.bolt \
        -reorder-blocks=ext-tsp \
        -reorder-functions=cdsort \
        -split-functions \
        -split-all-cold \
        -split-eh \
        -dyno-stats \
        -icf=1 \
        -use-gnu-stack \
        -plt=hot || (
        echo "Could not optimize binary for cc1plus"
        exit 1
    )

    mv $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1 $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1.orig
    mv $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus.orig

    mv $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1.bolt $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1
    mv $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus.bolt $pkgdir/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/cc1plus

    mv ${pkgdir}/usr ${pkgdir}/opt
    install -Dm755 "$srcdir/c89" "$pkgdir/opt/bin/c89"
    install -Dm755 "$srcdir/c99" "$pkgdir/opt/bin/c99"
}