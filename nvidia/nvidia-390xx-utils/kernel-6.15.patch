From b065b76a0df4b6b859a41a6359bd3040d06d9cfa Mon Sep 17 00:00:00 2001
From: Vasiliy Stelmachenok <ventureo@cachyos.org>
Date: Tue, 20 May 2025 18:41:59 +0300
Subject: [PATCH] Fix NVIDIA 390.147 driver for Linux 6.15-rc1

Based on the Joan Bruguera's patch for 470.xx.

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 kernel/Kbuild                                | 26 +++++-------
 kernel/nvidia-drm/nvidia-drm-connector.c     |  6 +++
 kernel/nvidia-modeset/nvidia-modeset-linux.c | 14 +++++++
 kernel/nvidia-uvm/uvm8.c                     | 10 +++++
 kernel/nvidia/nv-mmap.c                      | 42 ++++++++++++++++++++
 kernel/nvidia/nv.c                           |  7 +++-
 6 files changed, 87 insertions(+), 18 deletions(-)

diff --git a/kernel/Kbuild b/kernel/Kbuild
index 9a8c693..3b7bc06 100644
--- a/kernel/Kbuild
+++ b/kernel/Kbuild
@@ -53,29 +53,21 @@ ASSIGN_PER_OBJ_CFLAGS = \
 $(foreach _module, $(NV_KERNEL_MODULES), \
  $(eval include $(src)/$(_module)/$(_module).Kbuild))
 
-
-#
-# Define CFLAGS that apply to all the NVIDIA kernel modules. EXTRA_CFLAGS
-# is deprecated since 2.6.24 in favor of ccflags-y, but we need to support
-# older kernels which do not have ccflags-y. Newer kernels append
-# $(EXTRA_CFLAGS) to ccflags-y for compatibility.
-#
-
-EXTRA_CFLAGS += -std=gnu17
-EXTRA_CFLAGS += -I$(src)/common/inc
-EXTRA_CFLAGS += -I$(src)
-EXTRA_CFLAGS += -Wall -Wno-deprecated-non-prototype -Wno-strict-prototypes $(DEFINES) $(INCLUDES) -Wsign-compare -Wno-cast-qual -Wno-error
-EXTRA_CFLAGS += -D__KERNEL__ -DMODULE -DNVRM -DNV_VERSION_STRING=\"390.157\" -Wno-unused-function -Wuninitialized -fno-strict-aliasing -mno-red-zone -mcmodel=kernel -DNV_UVM_ENABLE -Wno-sign-compare -Wno-format-extra-args
-EXTRA_CFLAGS += $(call cc-option,-Werror=undef,)
-EXTRA_CFLAGS += -DNV_SPECTRE_V2=$(NV_SPECTRE_V2)
-EXTRA_CFLAGS += -DNV_KERNEL_INTERFACE_LAYER
+ccflags-y += -std=gnu17
+ccflags-y += -I$(src)/common/inc
+ccflags-y += -I$(src)
+ccflags-y += -Wall -Wno-deprecated-non-prototype -Wno-strict-prototypes $(DEFINES) $(INCLUDES) -Wsign-compare -Wno-cast-qual -Wno-error
+ccflags-y += -D__KERNEL__ -DMODULE -DNVRM -DNV_VERSION_STRING=\"390.157\" -Wno-unused-function -Wuninitialized -fno-strict-aliasing -mno-red-zone -mcmodel=kernel -DNV_UVM_ENABLE -Wno-sign-compare -Wno-format-extra-args
+ccflags-y += $(call cc-option,-Werror=undef,)
+ccflags-y += -DNV_SPECTRE_V2=$(NV_SPECTRE_V2)
+ccflags-y += -DNV_KERNEL_INTERFACE_LAYER
 
 #
 # Detect SGI UV systems and apply system-specific optimizations.
 #
 
 ifneq ($(wildcard /proc/sgi_uv),)
- EXTRA_CFLAGS += -DNV_CONFIG_X86_UV
+ ccflags-y += -DNV_CONFIG_X86_UV
 endif
 
 
diff --git a/kernel/nvidia-drm/nvidia-drm-connector.c b/kernel/nvidia-drm/nvidia-drm-connector.c
index 0e9e976..b9a3348 100644
--- a/kernel/nvidia-drm/nvidia-drm-connector.c
+++ b/kernel/nvidia-drm/nvidia-drm-connector.c
@@ -313,8 +313,14 @@ static int nv_drm_connector_get_modes(struct drm_connector *connector)
     return count;
 }
 
+// Rel. commit. "drm/connector: make mode_valid take a const struct drm_display_mode" (Dmitry Baryshkov, 14 Dec 2024)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+static int nv_drm_connector_mode_valid(struct drm_connector    *connector,
+                                       const struct drm_display_mode *mode)
+#else
 static int nv_drm_connector_mode_valid(struct drm_connector    *connector,
                                        struct drm_display_mode *mode)
+#endif
 {
     struct drm_device *dev = connector->dev;
     struct nv_drm_device *nv_dev = to_nv_device(dev);
diff --git a/kernel/nvidia-modeset/nvidia-modeset-linux.c b/kernel/nvidia-modeset/nvidia-modeset-linux.c
index f7f1def..deec31d 100644
--- a/kernel/nvidia-modeset/nvidia-modeset-linux.c
+++ b/kernel/nvidia-modeset/nvidia-modeset-linux.c
@@ -8,6 +8,7 @@
  * _NVRM_COPYRIGHT_END_
  */
 
+#include <linux/version.h>
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/slab.h>
@@ -495,9 +496,16 @@ static void nvkms_kthread_q_callback(void *arg)
      * pending timers and than waiting for workqueue callbacks.
      */
     if (timer->kernel_timer_created) {
+// Rel. commit "treewide: Switch/rename to timer_delete[_sync]()" (Thomas Gleixner, 5 Apr 2025)
+// This provides a shim for ancient kernels before timer_delete_sync was introduced
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+        timer_delete_sync(&timer->kernel_timer);
+#else
         del_timer_sync(&timer->kernel_timer);
+#endif
     }
 
+
     down(&nvkms_lock);
 
     if (timer->isRefPtr) {
@@ -1266,7 +1274,13 @@ restart:
              * completion, and we wait for queue completion with
              * nv_kthread_q_stop below.
              */
+// Rel. commit "treewide: Switch/rename to timer_delete[_sync]()" (Thomas Gleixner, 5 Apr 2025)
+// This provides a shim for ancient kernels before timer_delete_sync was introduced
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+            if (timer_delete_sync(&timer->kernel_timer) == 1) {
+#else
             if (del_timer_sync(&timer->kernel_timer) == 1) {
+#endif
                 /*  We've deactivated timer so we need to clean after it */
                 list_del(&timer->timers_list);
                 
diff --git a/kernel/nvidia-uvm/uvm8.c b/kernel/nvidia-uvm/uvm8.c
index 49e1047..3b9a029 100644
--- a/kernel/nvidia-uvm/uvm8.c
+++ b/kernel/nvidia-uvm/uvm8.c
@@ -658,7 +658,17 @@ static int uvm_mmap(struct file *filp, struct vm_area_struct *vma)
     // Using VM_DONTCOPY would be nice, but madvise(MADV_DOFORK) can reset that
     // so we have to handle vm_open on fork anyway. We could disable MADV_DOFORK
     // with VM_IO, but that causes other mapping issues.
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+    // Rel. commit "mm: uninline the main body of vma_start_write()" (Suren Baghdasaryan, 13 Feb 2025)
+    // Since Linux 6.15, vm_flags_set and vm_flags_clear call a GPL-only symbol
+    // for locking (__vma_start_write), which can't be called from non-GPL code.
+    // However, it appears all uses on the driver are on VMAs being initially
+    // mapped / which are already locked, so we can use vm_flags_reset, which
+    // doesn't lock the VMA, but rather just asserts it is already write-locked.
+    vm_flags_reset(vma, vma->vm_flags | (VM_MIXEDMAP | VM_DONTEXPAND));
+#else
     vm_flags_set(vma, VM_MIXEDMAP | VM_DONTEXPAND);
+#endif
 
     vma->vm_ops = &uvm_vm_ops_managed;
 
diff --git a/kernel/nvidia/nv-mmap.c b/kernel/nvidia/nv-mmap.c
index da891ff..69b5d52 100644
--- a/kernel/nvidia/nv-mmap.c
+++ b/kernel/nvidia/nv-mmap.c
@@ -447,7 +447,17 @@ int nvidia_mmap_helper(
             addr  = mmap_start;
             
             // Needed for the linux kernel for mapping compound pages
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+            // Rel. commit "mm: uninline the main body of vma_start_write()" (Suren Baghdasaryan, 13 Feb 2025)
+            // Since Linux 6.15, vm_flags_set and vm_flags_clear call a GPL-only symbol
+            // for locking (__vma_start_write), which can't be called from non-GPL code.
+            // However, it appears all uses on the driver are on VMAs being initially
+            // mapped / which are already locked, so we can use vm_flags_reset, which
+            // doesn't lock the VMA, but rather just asserts it is already write-locked.
+            vm_flags_reset(vma, vma->vm_flags | VM_MIXEDMAP);
+#else
             vm_flags_set(vma, VM_MIXEDMAP);
+#endif
 
             for (j = 0; j < pages; j++)
             {
@@ -471,7 +481,17 @@ int nvidia_mmap_helper(
             }
         }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+        // Rel. commit "mm: uninline the main body of vma_start_write()" (Suren Baghdasaryan, 13 Feb 2025)
+        // Since Linux 6.15, vm_flags_set and vm_flags_clear call a GPL-only symbol
+        // for locking (__vma_start_write), which can't be called from non-GPL code.
+        // However, it appears all uses on the driver are on VMAs being initially
+        // mapped / which are already locked, so we can use vm_flags_reset, which
+        // doesn't lock the VMA, but rather just asserts it is already write-locked.
+        vm_flags_reset(vma, vma->vm_flags | VM_IO);
+#else
         vm_flags_set(vma, VM_IO);
+#endif
     }
     else
     {
@@ -533,15 +553,37 @@ int nvidia_mmap_helper(
 
         NV_PRINT_AT(NV_DBG_MEMINFO, at);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+        // Rel. commit "mm: uninline the main body of vma_start_write()" (Suren Baghdasaryan, 13 Feb 2025)
+        // Since Linux 6.15, vm_flags_set and vm_flags_clear call a GPL-only symbol
+        // for locking (__vma_start_write), which can't be called from non-GPL code.
+        // However, it appears all uses on the driver are on VMAs being initially
+        // mapped / which are already locked, so we can use vm_flags_reset, which
+        // doesn't lock the VMA, but rather just asserts it is already write-locked.
+        vm_flags_reset(vma, vma->vm_flags | (VM_IO | VM_LOCKED | VM_RESERVED));
+        vm_flags_reset(vma, vma->vm_flags | (VM_DONTEXPAND | VM_DONTDUMP));
+#else
         vm_flags_set(vma, VM_IO | VM_LOCKED | VM_RESERVED);
         vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
+#endif
     }
 
     if ((prot & NV_PROTECT_WRITEABLE) == 0)
     {
         vma->vm_page_prot = NV_PGPROT_READ_ONLY(vma->vm_page_prot);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+        // Rel. commit "mm: uninline the main body of vma_start_write()" (Suren Baghdasaryan, 13 Feb 2025)
+        // Since Linux 6.15, vm_flags_set and vm_flags_clear call a GPL-only symbol
+        // for locking (__vma_start_write), which can't be called from non-GPL code.
+        // However, it appears all uses on the driver are on VMAs being initially
+        // mapped / which are already locked, so we can use vm_flags_reset, which
+        // doesn't lock the VMA, but rather just asserts it is already write-locked.
+        vm_flags_reset(vma, vma->vm_flags & ~VM_WRITE);
+        vm_flags_reset(vma, vma->vm_flags & ~VM_MAYWRITE);
+#else
         vm_flags_clear(vma, VM_WRITE);
         vm_flags_clear(vma, VM_MAYWRITE);
+#endif
     }
 
     vma->vm_ops = &nv_vm_ops;
diff --git a/kernel/nvidia/nv.c b/kernel/nvidia/nv.c
index 4fa9c23..1bb9900 100644
--- a/kernel/nvidia/nv.c
+++ b/kernel/nvidia/nv.c
@@ -3514,7 +3513,13 @@ int NV_API_CALL nv_stop_rc_timer(
 
     nv_printf(NV_DBG_INFO, "NVRM: stopping rc timer\n");
     nv->rc_timer_enabled = 0;
+// Rel. commit "treewide: Switch/rename to timer_delete[_sync]()" (Thomas Gleixner, 5 Apr 2025)
+// This provides a shim for ancient kernels before timer_delete_sync was introduced
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+    timer_delete_sync(&nvl->rc_timer.kernel_timer);
+#else
     del_timer_sync(&nvl->rc_timer.kernel_timer);
+#endif
     nv_printf(NV_DBG_INFO, "NVRM: rc timer stopped\n");
 
     return 0;
-- 
2.49.0

