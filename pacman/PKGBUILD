# vim: set ts=2 sw=2 et:
### Arch Linux PKGBUILD maintainer:
# Maintainer: Morten Linderud <foxboron@archlinux.org>
### CachyOS PKGBUILD maintainers:
# Maintainer: Vladislav Nepogodin (vnepogodin) <nepogodin.vlad@gmail.com>
# Maintainer: Piotr Gorski <piotrgorski@cachyos.org>
# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>

_staging=false
pkgname=pacman
pkgver=6.0.2
_pkgver=6.0.2
_sqlitever=$(curl -s 'https://archlinux.org/packages/search/json/?name=sqlite' | grep -oP '"pkgver":\s*"\K[^"]+' | head -n 1 | awk -F. '{
    printf "%d%02d%02d", $1, $2, $3;
    if (NF == 4) { printf "%02d", $4 }
    else { printf "00" }
}')

pkgrel=22
pkgdesc="A library-based package manager with dependency support. CachyOS fork."
arch=('x86_64')
url="https://www.archlinux.org/pacman/"
license=('GPL')
depends=('bash' 'glibc' 'libarchive' 'curl' 'gpgme' 'pacman-mirrorlist'
         'gettext' 'gawk' 'coreutils' 'gnupg' 'grep' 'debugedit')
makedepends=('meson' 'asciidoc' 'doxygen' 'git' 'curl' 'unzip')
checkdepends=('python' 'fakechroot')
optdepends=('perl-locale-gettext: translation support in makepkg-template')
provides=('libalpm.so')
backup=(etc/pacman.conf
        etc/makepkg.conf)
options=('strip')
#validpgpkeys=('6645B0A8C7005E78DB1D7864F99FFE0FEAE999BD'  # Allan McRae <allan@archlinux.org>
#              'B8151B117037781095514CA7BBDFFC92306B1121') # Andrew Gregory (pacman) <andrew@archlinux.org>
_commit="6956e5639c641704f8b482a7af08a9d6ffe93117"
if $_staging; then
    _commit="15692ad4315c8e4b5e4786a1a760274a072f0201"
    makedepends+=('cmake' 'rust' 'clang' 'llvm' 'tcl')
fi
source=(
#       https://sources.archlinux.org/other/pacman/$pkgname-$_pkgver.tar.xz{,.sig}
        git+https://github.com/CachyOS/pacman.git#commit=${_commit}
        "pacman.conf"
        "makepkg.conf"
#        pacman-always-create-directories-from-debugedit.patch::https://gitlab.archlinux.org/pacman/pacman/-/commit/efd0c24c07b86be014a4edb5a8ece021b87e3900.patch
#        pacman-always-create-directories-from-debugedit-fixup.patch::https://gitlab.archlinux.org/pacman/pacman/-/commit/86981383a2f4380bda26311831be94cdc743649b.patch
#        pacman-fix-unique-source-paths.patch::https://gitlab.archlinux.org/pacman/pacman/-/commit/478af273dfe24ded197ec54ae977ddc3719d74a0.patch
#        pacman-strip-include-o-files-similar-to-kernel-modules.patch::https://gitlab.archlinux.org/pacman/pacman/-/commit/de11824527ec4e2561e161ac40a5714ec943543c.patch
#        "0001-add-support-for-x86_64_v-2-3-4-autodetection.patch"
#        "0001-Revert-pacman-key-Don-t-check-gpg-s-trustdb-after-ea.patch"
#        "0001-add-information-about-origin-db.patch"
        )
sha256sums=('SKIP'
            '47f4ba578b1a6a3291cb65a6f60ab8c4871ae45bbe93da308a595a447ed9ad9d'
            '90f77e16fb4425cf62969203447aa2803f5eb550d6c4fe2dda2035656e25615d')

if $_staging; then
    source+=(78cd453.patch)
    source+=(static_sqlite.patch)
    source+=("https://www.sqlite.org/2023/sqlite-src-${_sqlitever}.zip")
fi

prepare() {
  cd "${pkgname}"
  # we backport way too often in pacman
  # lets at least make it more convenient
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}
build() {

if $_staging; then
  export AR=llvm-ar
  export CC=clang
  export CXX=clang++
  export NM=llvm-nm
  export RANLIB=llvm-ranlib

  local _saved_cflags="${CFLAGS}"
  local _saved_cppflags="${CPPFLAGS}"
  local _saved_cxxflags="${CXXFLAGS}"

  # this uses malloc_usable_size, which is incompatible with fortification level 3
  export CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
  export CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"

  export CPPFLAGS="$CPPFLAGS \
        -DSQLITE_ENABLE_COLUMN_METADATA=1 \
        -DSQLITE_ENABLE_UNLOCK_NOTIFY \
        -DSQLITE_ENABLE_DBSTAT_VTAB=1 \
        -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
        -DSQLITE_ENABLE_FTS3_PARENTHESIS \
        -DSQLITE_SECURE_DELETE \
        -DSQLITE_ENABLE_STMTVTAB \
        -DSQLITE_ENABLE_STAT4 \
        -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
        -DSQLITE_MAX_EXPR_DEPTH=10000 \
        -DSQLITE_ENABLE_MATH_FUNCTIONS"

  cd sqlite-src-${_sqlitever}
  ./configure --prefix="${srcdir}/${pkgname}"/tmp_sqlite  \
        --disable-shared \
        --enable-fts3 \
        --enable-fts4 \
        --enable-fts5 \
        --enable-rtree \
        --disable-tcl \
        --with-pic \
        --enable-fast-install

  sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0/g' libtool
  make
  make install

  export CFLAGS="${_saved_cflags}"
  export CPPFLAGS="${_saved_cppflags}"
  export CXXFLAGS="${_saved_cxxflags}"

  export CFLAGS+=" -fno-semantic-interposition -flto=thin"
  export CXXFLAGS+=" -fno-semantic-interposition -flto=thin"
  export RUSTFLAGS+=" -Cembed-bitcode -Clinker-plugin-lto -Clinker=clang -C link-arg=-flto=thin"
  export LDFLAGS+=" -lm"

  cd ..
fi

  cd "${pkgname}"

  meson --prefix=/usr \
        --buildtype=plain \
        -Ddoc=enabled \
        -Ddoxygen=enabled \
        -Dscriptlet-shell=/usr/bin/bash \
        -Dldconfig=/usr/bin/ldconfig \
        build

  meson compile -C build
}

check() {
  cd "${pkgname}"

if $_staging; then
  export CFLAGS+=" -fno-semantic-interposition -flto=thin"
  export CXXFLAGS+=" -fno-semantic-interposition -flto=thin"
  export RUSTFLAGS+=" -Cembed-bitcode -Clinker-plugin-lto -Clinker=clang -C link-arg=-flto=thin"
  export CC=clang
  export CXX=clang++
fi

  meson test -C build
}

package() {
  cd "${pkgname}"

if $_staging; then
  export CFLAGS+=" -fno-semantic-interposition -flto=thin"
  export CXXFLAGS+=" -fno-semantic-interposition -flto=thin"
  export RUSTFLAGS+=" -Cembed-bitcode -Clinker-plugin-lto -Clinker=clang -C link-arg=-flto=thin"
  export CC=clang
  export CXX=clang++
fi

  DESTDIR="$pkgdir" meson install -C build

  # install Arch specific stuff
  install -dm755 "$pkgdir/etc"
  install -m644 "$srcdir/pacman.conf" "$pkgdir/etc"
  install -m644 "$srcdir/makepkg.conf" "$pkgdir/etc"
}
