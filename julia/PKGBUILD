# Maintainer: Antonio Rojas <arojas@archlinux.org>
# Contributor: Alexander F. RÃ¸dseth <xyproto@archlinux.org>
# Contributor: Eli Schwartz <eschwartz@archlinux.org>
# Contributor: Lex Black <autumn-wind@web.de>
# Contributor: Michael Jakl <jakl.michael@gmail.com>
# Contributor: devmotion <nospam-archlinux.org@devmotion.de>
# Contributor: Valentin Churavy <v.churavy@gmail.com>

# Julia-PGO PKGBUILD
# Maintainer: Laio Seman <laio [at] ieee.org>
# using PGO-LTO script from https://github.com/JuliaLang/julia/pull/45641#issue-1268010204

pkgname=julia
pkgver=1.10.0
pkgrel=2
arch=(x86_64)
pkgdesc='High-level, high-performance, dynamic programming language'
url='https://julialang.org/'
license=(MIT)
depends=(blas64-openblas
         fftw
         libblastrampoline
         libgit2
         libunwind
         libutf8proc
         lld
         llvm-julia-libs
         mbedtls2
         openlibm
         p7zip
         pcre2
         suitesparse)
makedepends=(cmake
             gcc-fortran
             libwhich
             llvm-julia
             patchelf
             python
             clang
             llvm)
optdepends=('gnuplot: If using the Gaston Package from julia')
source=(https://github.com/JuliaLang/julia/releases/download/v$pkgver/$pkgname-$pkgver-full.tar.gz{,.asc}
        c12e8515.patch
        julia-libgit2-1.7.patch::https://github.com/JuliaLang/julia/commit/2c4c068e.patch
        julia-libunwind-1.6.patch
        julia-libcholmod-cuda.patch
        julia-suitesparse-7.patch
        julia-hardcoded-libs.patch
        git+https://github.com/JuliaLang/Microbenchmarks.git)
backup=(etc/julia/startup.jl)
sha256sums=('a5f8c0ce08cf132bdd919ca0b5b3b2b66c89e0e5f7e7fb2a81ffa7f225e3db4c'
            'SKIP'
            '2cc294b63e601d50341979fb936826bdba59de2165a5929eae927e152652f367'
            'b533dd999f019258cbcae1563f18715f41e42e0786b681150cb2c28f8a0da963'
            '3c0c03eabb668e3242fcd3058c1011dfbb579cc1c5adc3ae1016531e711cc64e'
            'f69afd7db3fabe4b747afa2404e1202c1dcfe0f8c5fe5238e424eea737fa2a23'
            '0fd1a0c1fcbe7f583139ed3a4a87f77963f06876d69058fa3ffbedfaec609ee7'
            '02f0ae518dfd50c2b3abf95fa760de85298baf79d80c2f6f48ac182e58a736d7'
            'SKIP')
validpgpkeys=('3673DF529D9049477F76B37566E3C7DC03D6E495') # Julia (Binary signing key) <buildbot@julialang.org>

prepare() {
  cd $pkgname-$pkgver

# libunwind 1.6 compatibility
  patch -p1 -i ../julia-libunwind-1.6.patch
# Ignore harmless test failure, needs investigation
  sed -e '/int.jl/d' -i test/cmdlineargs.jl
# Revert test that depends on patched gmp
  patch -Rp1 -i ../c12e8515.patch
# Harmless test failure, needs investigation
  sed -e '/int.jl/d' -i test/cmdlineargs.jl
# libgit2 1.7 compatibility
  patch -p1 -i ../julia-libgit2-1.7.patch
# Don't use libcholmod-cuda
  patch -p1 -i ../julia-libcholmod-cuda.patch
# Don't hardcode library names
  patch -p1 -i ../julia-hardcoded-libs.patch
# Fix warnings with suitesparse 7
  cd stdlib/srccache
  _SAsha=279b363ca8d3129d4742903d37c8b11545fa08a2
  tar -xzf SparseArrays-$_SAsha.tar.gz
  patch -d JuliaSparse-SparseArrays.jl-${_SAsha:0:7} -p1 < "$srcdir"/julia-suitesparse-7.patch
  rm SparseArrays-$_SAsha.tar.gz
  tar -czf SparseArrays-$_SAsha.tar.gz JuliaSparse-SparseArrays.jl-${_SAsha:0:7}
  md5sum SparseArrays-$_SAsha.tar.gz | cut -d ' ' -f 1 > ../../deps/checksums/SparseArrays-$_SAsha.tar.gz/md5
  sha512sum SparseArrays-$_SAsha.tar.gz | cut -d ' ' -f 1 > ../../deps/checksums/SparseArrays-$_SAsha.tar.gz/sha512

  mkdir -p ${srcdir}/${pkgname}-${pkgver}/pgo-lto
}

_make() {
  local make_options=(
    prefix=/usr
    bindir=/usr/bin
    sysconfdir=/etc
    libexecdir=/usr/lib
    USE_BINARYBUILDER=0
    USE_SYSTEM_CSL=1
    USE_SYSTEM_LLVM=1
    USE_SYSTEM_LLD=1
    USE_SYSTEM_LIBUNWIND=1
    USE_SYSTEM_PCRE=1
    USE_SYSTEM_BLAS=1
    USE_SYSTEM_LAPACK=1
    USE_SYSTEM_LIBBLASTRAMPOLINE=1
    USE_SYSTEM_GMP=1
    USE_SYSTEM_MPFR=1
    USE_SYSTEM_LIBSUITESPARSE=1
    USE_SYSTEM_LIBWHICH=1
    USE_SYSTEM_DSFMT=0
    USE_SYSTEM_LIBUV=0
    USE_SYSTEM_UTF8PROC=1
    USE_SYSTEM_LIBGIT2=1
    USE_SYSTEM_LIBSSH2=1
    USE_SYSTEM_MBEDTLS=1
    USE_SYSTEM_CURL=1
    USE_SYSTEM_PATCHELF=1
    USE_SYSTEM_ZLIB=1
    USE_SYSTEM_P7ZIP=1
    USE_SYSTEM_OPENLIBM=1
    USE_BLAS64=1
    LIBBLAS=-lblas64
    LIBBLASNAME=libblas64
    LIBLAPACK=-llapack64
    LIBLAPACKNAME=liblapack64
    MARCH=x86-64
    VERBOSE=1
    JLDFLAGS="$LDFLAGS"
    LLVM_CONFIG=/usr/lib/llvm-julia/bin/llvm-config
  )

  LD_LIBRARY_PATH="/usr/lib/mbedtls2" make "${make_options[@]}" "$@"
}


build() {
  export PROFILE_FILE=$(pwd)/profile.profraw
  export ROOT_DIR=$(pwd)
  cd $pkgname-$pkgver
  export JULIA_BUILD_DIR=$(pwd)

  export STAGE1=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage1.build
  export STAGE2=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage2.build
  export CC=clang
  export CXX=clang++

  rm -rf $STAGE1
  rm -rf $STAGE2
  mkdir -p $STAGE1
  mkdir -p $STAGE2   
  
  # Set PGO flags
  export COUNTERS_PER_SITE=6
  export PROFILE_DIR=${PWD}/profiles
  rm -rf $PROFILE_DIR
  mkdir -p $PROFILE_DIR
    
  export PGO_CFLAGS=" -fprofile-generate=${PROFILE_DIR} -mllvm -vp-counters-per-site=${COUNTERS_PER_SITE}"
  export PGO_CXXFLAGS=" -fprofile-generate=${PROFILE_DIR} -mllvm -vp-counters-per-site=${COUNTERS_PER_SITE}"

  # backup original flags
  export CFLAGS_ORIG=$CFLAGS
  export CXXFLAGS_ORIG=$CXXFLAGS

  # Append PGO flags
  export CFLAGS="${CFLAGS} ${PGO_CFLAGS}"
  export CXXFLAGS="${CXXFLAGS} ${PGO_CXXFLAGS}"

  _make O=$STAGE1 configure
  _make -C $STAGE1
  
  # Clean profile dir
  rm -rf $PROFILE_DIR
  mkdir -p $PROFILE_DIR

  cd $ROOT_DIR/Microbenchmarks
  LLVM_PROFILE_FILE=${PROFILE_DIR}/_%m_%p.profraw $STAGE1/julia perf.jl
  LLVM_PROFILE_FILE=${PROFILE_DIR}/_%m_%p.profraw $STAGE1/julia perf.jl
  LLVM_PROFILE_FILE=${PROFILE_DIR}/_%m_%p.profraw $STAGE1/julia perf.jl
  cd ..  

  # Build stage 2
  export PGO_CFLAGS="-fprofile-use=${PROFILE_FILE}"
  export PGO_CXXFLAGS="-fprofile-use=${PROFILE_FILE}"

  llvm-profdata merge -output=${PROFILE_FILE} ${PROFILE_DIR}/*.profraw

  export CFLAGS="${CFLAGS_ORIG} ${PGO_CFLAGS}"
  export CXXFLAGS="${CXXFLAGS_ORIG} ${PGO_CXXFLAGS}"

  cd $JULIA_BUILD_DIR
  _make O=$STAGE2 configure
  _make -C $STAGE2
}

check() {
  export STAGE2_DONE=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage2.build
  cd $STAGE2_DONE/test
  ln -s /etc/ssl/cert.pem ../usr/share/julia

  $STAGE2_DONE/julia --check-bounds=yes --startup-file=no ./runtests.jl \
    --skip Downloads \
    --skip Sockets \
    --skip nghttp2_jll \
    --skip GMP_jll \
    --skip LibCURL \
    --skip LibSSH2_jll \
    --skip MbedTLS_jll \
    --skip MPFR_jll \
    --skip OpenBLAS_jll \
    --skip SuiteSparse_jll \
    --skip PCRE2_jll \
    --skip LibGit2_jll \
    --skip Zlib_jll
  find ../stdlib \( -name \*.cov -o -name \*.mem \) -delete
  rm -fr ../stdlib/Artifacts/test/artifacts
}

package() {
  export STAGE2_DONE=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage2.build
  cd $STAGE2_DONE
  _make DESTDIR="$pkgdir" install

  ln -sf /etc/ssl/cert.pem "$STAGE2_DONE"/usr/share/julia # Needed by some packages

  rm -f "$STAGE2_DONE"/usr/lib/julia/libccalltest.so.debug # Remove debug testing library
  install -Dm644 ${srcdir}/${pkgname}-${pkgver}/LICENSE.md -t "$STAGE2_DONE"/usr/share/licenses/$pkgname
}
