# Original Julia PKGBUILD
# Maintainer: Antonio Rojas <arojas@archlinux.org>
# Contributor: Alexander F. RÃ¸dseth <xyproto@archlinux.org>
# Contributor: Eli Schwartz <eschwartz@archlinux.org>
# Contributor: Lex Black <autumn-wind@web.de>
# Contributor: Michael Jakl <jakl.michael@gmail.com>
# Contributor: devmotion <nospam-archlinux.org@devmotion.de>
# Contributor: Valentin Churavy <v.churavy@gmail.com>

# Julia-PGO PKGBUILD
# Maintainer: Laio Seman <laio [at] ieee.org>
# using PGO-LTO script from https://github.com/JuliaLang/julia/pull/45641#issue-1268010204

pkgname=julia
pkgver=1.10.0
pkgrel=1
pkgdesc="Julia with Profile-Guided Optimization (PGO)"
arch=('x86_64')
url="http://julialang.org/"
license=('MIT')  # Update if different
depends=(blas64-openblas
         fftw
         libblastrampoline
         libgit2
         libunwind
         libutf8proc
         lld
         mbedtls2
         mbedtls
         openlibm
         p7zip
         pcre2
         suitesparse)
makedepends=(cmake
             gcc-fortran
             libwhich
             patchelf
             python)
source=(https://github.com/JuliaLang/julia/releases/download/v${pkgver}/julia-${pkgver}-full.tar.gz
        julia-hardcoded-libs.patch
        julia-suitesparse-7.patch)
optdepends=('gnuplot: If using the Gaston Package from julia')
validpgpkeys=('3673DF529D9049477F76B37566E3C7DC03D6E495') # Julia (Binary signing key) <buildbot@julialang.org>
sha256sums=('SKIP'
            '2c61b21c347900b52b26555a0c35d5c88fd23e55efc809a58aa6bc66da1fc506'
            '90e7f90053486bba26348cbc4f725958159ca5b6b1805124ccf050203dc2f468')

_make() {
  local make_options=(
    prefix=/usr
    bindir=/usr/bin
    sysconfdir=/etc
    libexecdir=/usr/lib
    #USE_BINARYBUILDER=0
    USE_SYSTEM_CSL=1
    #USE_SYSTEM_LLVM=1
    #USE_SYSTEM_LLD=1
    USE_SYSTEM_LIBUNWIND=1
    USE_SYSTEM_PCRE=1
    USE_SYSTEM_BLAS=1
    USE_SYSTEM_LAPACK=1
    USE_SYSTEM_LIBBLASTRAMPOLINE=1
    USE_SYSTEM_GMP=1
    USE_SYSTEM_MPFR=1
    USE_SYSTEM_LIBSUITESPARSE=1
    USE_SYSTEM_LIBWHICH=1
    USE_SYSTEM_DSFMT=0
    USE_SYSTEM_LIBUV=0
    USE_SYSTEM_UTF8PROC=1
    USE_SYSTEM_LIBGIT2=1
    USE_SYSTEM_LIBSSH2=1
    USE_SYSTEM_MBEDTLS=1
    USE_SYSTEM_CURL=1
    USE_SYSTEM_PATCHELF=1
    USE_SYSTEM_ZLIB=1
    USE_SYSTEM_P7ZIP=1
    USE_SYSTEM_OPENLIBM=1
    USE_BLAS64=1
    LIBBLAS=-lblas64
    LIBBLASNAME=libblas64
    LIBLAPACK=-llapack64
    LIBLAPACKNAME=liblapack64
    MARCH=x86-64
    VERBOSE=1
    JLDFLAGS="$LDFLAGS"
    #LLVM_CONFIG=llvm-config-15
  )

  make "${make_options[@]}" "$@"
}

prepare() {

    # create a var to the current dir
    CURRENT_DIR=$(pwd)
    cd $pkgname-$pkgver
    # Don't hardcode library names
    patch -p1 -i ../julia-hardcoded-libs.patch

    # go back to the current dir
    cd $CURRENT_DIR
    mkdir -p ${srcdir}/${pkgname}-${pkgver}/pgo-lto
    #cp ../pgoing.jl ${srcdir}/${pkgname}-${pkgver}/pgo-lto
}


build() {
    cd "${srcdir}/${pkgname}-${pkgver}"
    sed -i '/\$(eval \$(call symlink_system_library,LIBSUITESPARSE,libcholmod_cuda))/d' base/Makefile
    sed -i '/\$(eval \$(call symlink_system_library,LIBSUITESPARSE,libspqr_cuda))/d' base/Makefile

    # Perform the build steps
    cd pgo-lto

    export PROFILE_FILE=$(pwd)/profile.profraw
    export COUNTERS_PER_SITE=6
    export PROFILE_DIR=${PWD}/profiles
    mkdir -p $PROFILE_DIR

    cd ..
    export STAGE0=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage0.build
    export STAGE1=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage1.build
    export STAGE2=${srcdir}/${pkgname}-${pkgver}/pgo-lto/stage2.build
    mkdir -p $STAGE0
    mkdir -p $STAGE1
    mkdir -p $STAGE2

    export STAGE0_TOOLS=${STAGE0}/usr/tools
    export LLVM_CXXFILT=${STAGE0_TOOLS}/llvm-cxxfilt
    export LLVM_PROFDATA=${STAGE0_TOOLS}/llvm-profdata
    export LLVM_OBJCOPY=${STAGE0_TOOLS}/llvm-objcopy

    make O=pgo-lto/stage0.build configure
    export USE_BINARYBUILDER_LLVM=1
    make -C ${STAGE0}/deps install-clang install-llvm install-lld install-llvm-tools    
    find -name 'libclang_rt.profile-*.a' -exec $LLVM_OBJCOPY --rename-section .ctors=.init_array --rename-section .dtors=.fini_array {} \;

    export CC=${STAGE0_TOOLS}/clang
    export CXX=${STAGE0_TOOLS}/clang++
    export LD=${STAGE0_TOOLS}/ld.lld
    export AR=${STAGE0_TOOLS}/llvm-ar
    export RANLIB=${STAGE0_TOOLS}/llvm-ranlib

    export USE_BINARYBUILDER_LLVM=0
    export PATH=${STAGE0_TOOLS}:$PATH
    _make O=pgo-lto/stage1.build configure
    _make O=pgo-lto/stage2.build configure

    cd pgo-lto

    # Set PGO flags
    export PGO_CFLAGS="-fprofile-generate=${PROFILE_DIR} -Xclang -mllvm -Xclang -vp-counters-per-site=${COUNTERS_PER_SITE}"
    export PGO_CXXFLAGS="-fprofile-generate=${PROFILE_DIR} -Xclang -mllvm -Xclang -vp-counters-per-site=${COUNTERS_PER_SITE}"
    export PGO_LDFLAGS="-fuse-ld=${LD} -flto=thin -fprofile-generate=${PROFILE_DIR}"

    # backup original flags
    export CFLAGS_ORIG=$CFLAGS
    export CXXFLAGS_ORIG=$CXXFLAGS
    export LDFLAGS_ORIG=$LDFLAGS

    # Append PGO flags
    export CFLAGS="${CFLAGS} ${PGO_CFLAGS}"
    export CXXFLAGS="${CXXFLAGS} ${PGO_CXXFLAGS}"
    export LDFLAGS="${LDFLAGS} ${PGO_LDFLAGS}"
    
    _make -C $STAGE1
    
    # Clean profile dir
    rm -rf $PROFILE_DIR
    mkdir -p $PROFILE_DIR

    # Run stage 1 profiling
    git clone https://github.com/JuliaLang/Microbenchmarks.git
    cd Microbenchmarks
    ../stage1.build/julia perf.jl
    cd ..

    # create PROFAW_FILES_LIST
    $LLVM_PROFDATA merge -output=${PROFILE_FILE} ${PROFILE_DIR}/*.profraw

    # Build stage 2
    export PGO_CFLAGS="-fprofile-use=${PROFILE_FILE}"
    export PGO_CXXFLAGS="-fprofile-use=${PROFILE_FILE}"
    export PGO_LDFLAGS="-fuse-ld=${LD} -flto=thin -fprofile-use=${PROFILE_FILE} -Wl,--icf=safe"

    export CFLAGS="${CFLAGS_ORIG} ${PGO_CFLAGS}"
    export CXXFLAGS="${CXXFLAGS_ORIG} ${PGO_CXXFLAGS}"
    export LDFLAGS="${LDFLAGS_ORIG} ${PGO_LDFLAGS}"
    
    export USE_BINARYBUILDER_LLVM=0
    _make -C $STAGE2
}


package() {

  cd $pkgname-$pkgver/pgo-lto/stage2.build
  _make DESTDIR="$pkgdir" install
  echo $PWD  
  cd $pkgdir
  echo $PWD
  patch -p1 -i ../../julia-suitesparse-7.patch
  ln -sf /etc/ssl/cert.pem "$pkgdir"/usr/share/julia # Needed by some packages

  rm "$pkgdir"/usr/lib/julia/libccalltest.so.debug # Remove debug testing library
}

# vim:set ts=2 sw=2 et:
sha256sums=('SKIP'
            '79a7a73cf9fe304e7ae2d21b961ab3bc5dfeb39a9cb79bef6c3447108ffb2949'
            '90e7f90053486bba26348cbc4f725958159ca5b6b1805124ccf050203dc2f468')
