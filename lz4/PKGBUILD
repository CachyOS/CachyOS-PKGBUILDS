# Maintainer: SÃ©bastien Luttringer
# PGO build: Laio O. Seman <laio [at] ieee.org>

pkgname=lz4
epoch=1
pkgver=1.9.4
pkgrel=3
pkgdesc='Extremely fast compression algorithm'
arch=('x86_64')
url='https://lz4.github.io/lz4/'
license=('GPL2')
makedepends=('git' 'cmake' 'ninja', 'llvm' 'clang')
checkdepends=('diffutils')
depends=('glibc')
source=("git+https://github.com/lz4/lz4.git#tag=v$pkgver")
sha256sums=('SKIP')

# Function to generate data and compress-decompress it
_generate_and_process_data() {
    echo "Generating data for $1 KB with compression level $2"
    _DATA_SIZE=$1
    _COMPRESSION_LEVEL=$2
    _FILENAME="data_${_DATA_SIZE}_${_COMPRESSION_LEVEL}.bin"
    echo "Data size: $_DATA_SIZE KB"
    # Generate data
    $_DATASET_GENERATOR -g$1 > $_FILENAME

    echo "Compressing and decompressing data"
    echo $_FILENAME
    # Compress
    _START_TIME=$(date +%s.%N)
    LLVM_PROFILE_FILE=${PGO_PROFILE_DIR}/_%m_%p.profraw $LZ4_BIN -$_COMPRESSION_LEVEL $_FILENAME $_FILENAME.lz4 > /dev/null 2>&1
    _END_TIME=$(date +%s.%N)
    _COMPRESS_TIME=$(echo "$_END_TIME - $_START_TIME" | bc)

    echo "Decompressing data"
    # Decompress
    _START_TIME=$(date +%s.%N)
    LLVM_PROFILE_FILE=${PGO_PROFILE_DIR}/_%m_%p.profraw $LZ4_BIN -d $_FILENAME.lz4 ${_FILENAME}_uncompressed > /dev/null 2>&1
    _END_TIME=$(date +%s.%N)
    _DECOMPRESS_TIME=$(echo "$_END_TIME - $_START_TIME" | bc)

    # Cleanup and log results
    rm $_FILENAME $_FILENAME.lz4 ${_FILENAME}_uncompressed
    echo "$_DATA_SIZE, $_COMPRESSION_LEVEL, $_COMPRESS_TIME, $_DECOMPRESS_TIME" >> results.csv
}

build() {
  export ROOT_DIR=$PWD
  export CC=clang
  export CXX=clang++

  mkdir -p pgo

  export PGO_PROFILE_DIR=$PWD/pgo
  # Generate PGO binary
  export CFLAGS="$CFLAGS -fprofile-generate"
  export CXXFLAGS="$CXXFLAGS -fprofile-generate"

  cmake -B build -S "$pkgname"/build/cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE='None' \
    -DCMAKE_INSTALL_PREFIX='/usr' \
    -Wno-dev
  cmake --build build

  cd $pkgname/tests
  #make datagen
  export DATASET_GENERATOR=$PWD/datagen
  cd $ROOT_DIR

  export LZ4_BIN=$ROOT_DIR/build/lz4

  # create data for 1MB, 10MB, 50MB
  export DATA_SIZES=(1000000 10000000 50000000)

  export COMPRESSION_LEVELS=(1 5 9) # 1 for fastest, 9 for best compression

  echo "PGO data generation"
  # Generate and process data for 100 times
  for i in {1..100}; do
      for SIZE in ${DATA_SIZES[@]}; do
          for LEVEL in ${COMPRESSION_LEVELS[@]}; do
              _generate_and_process_data $SIZE $LEVEL
          done
      done
  done

  for SIZE in ${DATA_SIZES[@]}; do
      for LEVEL in ${COMPRESSION_LEVELS[@]}; do
          _generate_and_process_data $SIZE $LEVEL
      done
  done

    export CFLAGS="${CFLAGS//-fprofile-generate/} -fprofile-use=$PGO_PROFILE_DIR/merged.profdata"
    export CXXFLAGS="${CXXFLAGS//-fprofile-generate/} -fprofile-use=$PGO_PROFILE_DIR/merged.profdata"

  llvm-profdata merge -o merged.profdata ${PGO_PROFILE_DIR}/*.profraw

  # clean everything
  rm -rf build

  cmake -B build -S "$pkgname"/build/cmake \
    -G Ninja \
    -DCMAKE_BUILD_TYPE='None' \
    -DCMAKE_INSTALL_PREFIX='/usr' \
    -Wno-dev
  cmake --build build

}

check() {
  rm -f passwd.lz4
  build/lz4 /etc/passwd passwd.lz4
  build/lz4 -d passwd.lz4 passwd
  diff -q /etc/passwd passwd
  rm passwd
}

package() {
  DESTDIR="$pkgdir" cmake --install build
}

# vim:set ts=2 sw=2 et:
