# Maintainer: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Maintainer: Giancarlo Razzolini <grazzolini@archlinux.org>
# Contributor: SoulHarsh007 <admin@soulharsh007.dev>

pkgname=dracut-cachyos
pkgver=107
pkgrel=1
pkgdesc="An event driven initramfs infrastructure"
arch=('x86_64')
url="https://github.com/dracut-ng/dracut-ng"
license=('GPL-2.0-or-later')
depends=(
  'bash'
  'coreutils'
  'cpio'
  'filesystem'
  'findutils'
  'gawk'
  'grep'
  'kmod'
  'pkgconf'
  'procps-ng'
  'sed'
  'systemd'
  'tpm2-tools'
  'util-linux'
)
makedepends=(
  'asciidoc'
  'bash-completion'
  'git'
  'rust'
)
optdepends=(
  'binutils: --uefi option support'
  'bluez: bluetooth (keyboard)'
  'btrfs-progs: scan for Btrfs on block devices'
  'busybox: allows use of busybox (on your own risk)'
  'bzip2: bzip2 compression'
  'cifs-utils: support CIFS'
  'connman: support for connman networking'
  'cryptsetup: support for encrypted with LUKS filesystems'
  'dash: allows use of dash (on your own risk)'
  'dhclient: legacy networking support'
  'dmraid: dmraid dracut module support'
  'e2fsprogs: ext2/3/4 filesystem support'
  'elfutils: strip binaries to reduce initramfs size'
  'f2fs-tools: fsfs filesystem support'
  'fuse3: live on NTFS (dmsquash-live-ntfs module)'
  'gzip: gzip compression'
  'iproute2: legacy networking support'
  'iputils: networking support'
  'lvm2: support Logical Volume Manager'
  'lzop: lzop compression'
  'mdadm: support MD devices, also known as software RAID devices'
  'multipath-tools: dmraid dracut module support'
  'nbd: support network block devices'
  'ndctl: NVDIMM support'
  'networkmanager: networkmanager support'
  'nfs-utils: support NFS'
  'ntfs-3g: live on NTFS (dmsquash-live-ntfs module)'
  'nvme-cli: NVMe-oF support (nvmf module)'
  'open-iscsi: support iSCSI (iscsi module)'
  'openssh: install ssh and scp along with config files and specified keys (ssh-client module)'
  'pigz: faster gzip compression'
  'plymouth: plymouth boot splash'
  'rng-tools: enable rngd service to help generating entropy early during boot'
  'sbsigntools: uefi_secureboot_cert/key configuration option support'
  'squashfs-tools: support for building a squashed initramfs'
  'tar: live tar image'
  'tpm2-tools: tpm2 support for e.g. LUKS'
  'xz: xz compression'
)
provides=('initramfs' "dracut=$pkgver")
conflicts=('dracut')
backup=('etc/dracut.conf' 'etc/dracut-cachyos.conf')
source=("${pkgname}-${pkgver}::git+${url}#tag=${pkgver}"
  "dracut-rebuild"
  "dracut-install"
  "dracut-remove"
  "90-dracut-install.hook"
  "60-dracut-remove.hook"
  "dracut-cachyos.conf"
  "snapshot-overlay.sh"
  "module-setup.sh")

sha512sums=('fadc8aba143cec154372ae4709a0cb6db9999a4f143bdf79c7307680baf500922b3e5e5ba659e4346a032949bf5b6a00f891421fbc517573dd3d1c9b5a034d56'
            '8a4c9ac056bee6e7e22057cbf7179a32759767694a955372f68d43b26be62e9e8381c6264fc4884c4b04e39ffd6c1a2cc0d7e947b5796b4d89278455f3843cb9'
            'f298693ee1a637329b1a38c746151c2ae8d2ae431f894c3001f55d812a2a20a68907ffa0b04ba748c18a2898cc30e0f49e75d0d13c7dd453129304f3cfd4621e'
            '13e3faab40ae0e13f7933fcf5e1b028b4af2010d91b5d6c4dcda164bc9ab62cdcdde21f4945f28f564546a8700bd285cca6a19f1575fcf1925dbde54fba9078a'
            '6ae1ed9a79b8cde9e51add070f99785bc19003c9e85b4112535c65edd1fb39c14aeaaeca13076fd1848e96c9d1dc2b98b0150c5fd47646d37662f566daa0aff7'
            'b84677cc05865d1571723658f2661cb749acf9039133b95893c2cfddc30070f885e8cd047aaa5dbc04dd3d8f9f6a4aa6573ac916c70edfd1daab4ecc5c582980'
            '3fb23adbf462d655638a6a5a3083b464150b05b088e9139fceda500ba7560a29eb90d0e4dab896a257264fc6e72ec537a0519ad4e4e25e4c44b2dc3263cb5a52'
            'ee103a605f1378dd7077fa33b710ba41ff7bd72befc0e211d9ccfe8ca5db74173bbd0566ec2929cd6bbafa4c2c287bd88a7b544edf0bbeca56181ae4382def09'
            '461231a756b6bc250fb973a5b4b6fbc0b2d6f8dae0dbc89a37bab17745dcfe38d9ae6cfe58bd4b9c4661e5f0024577ad9e4aa1d3c16169e7a83744da4b9068a5')

_backports=(
)

_reverts=(
)

prepare() {
  cd ${pkgname}-${pkgver}

  local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  # remove dracut modules not meant for arch x86_64
  for f in 45ifcfg 80cms 81cio_ignore 90ppcmac 91zipl \
    95dasd 95dasd_mod 95dasd_rules 95dcssblk 95fcoe* \
    95qeth_rules 95zfcp 95zfcp_rules 95znet; do
    rm -rf modules.d/$f
  done
}

build() {
  local prefix=/usr sysconfdir=/etc

  cd ${pkgname}-${pkgver}

  ./configure \
    --sysconfdir=${sysconfdir} \
    --prefix=${prefix} \
    --libdir=${prefix}/lib \
    --systemdsystemunitdir=${prefix}/lib/systemd/system \
    --bashcompletiondir=$(pkg-config --variable=completionsdir bash-completion) \
    --enable-dracut-cpio
  make
}

package() {
  cd ${pkgname}-${pkgver}

  DESTDIR="$pkgdir" make install
  install -Dm644 "${srcdir}/90-dracut-install.hook" "${pkgdir}/usr/share/libalpm/hooks/90-dracut-install.hook"
  install -Dm644 "${srcdir}/60-dracut-remove.hook"  "${pkgdir}/usr/share/libalpm/hooks/60-dracut-remove.hook"
  install -Dm755 "${srcdir}/dracut-install"         "${pkgdir}/usr/share/libalpm/scripts/dracut-install"
  install -Dm755 "${srcdir}/dracut-remove"          "${pkgdir}/usr/share/libalpm/scripts/dracut-remove"
  install -Dm755 "${srcdir}/dracut-rebuild"         "${pkgdir}/usr/bin/dracut-rebuild"
  install -Dm644 "${srcdir}/dracut-cachyos.conf"    "${pkgdir}/etc/dracut-cachyos.conf"
  install -Dm755 "${srcdir}/snapshot-overlay.sh"    "${pkgdir}/usr/lib/dracut/modules.d/91btrfs-snapshot-overlay/snapshot-overlay.sh"
  install -Dm755 "${srcdir}/module-setup.sh"        "${pkgdir}/usr/lib/dracut/modules.d/91btrfs-snapshot-overlay/module-setup.sh"
}
