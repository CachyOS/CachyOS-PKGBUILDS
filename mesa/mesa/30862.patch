From 85741c6a15de6ed402e0b5a8b2219dbdb83d5c44 Mon Sep 17 00:00:00 2001
From: Timothy Arceri <tarceri@itsqueeze.com>
Date: Tue, 27 Aug 2024 09:28:41 +1000
Subject: [PATCH 1/2] nir/tests: make add_loop_terminators more flexible

Here we update the helper to have an option to add the break to the else
blocks of the terminators.

Reviewed-by: Konstantin Seurer <konstantin.seurer@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/30862>
---
 src/compiler/nir/tests/opt_loop_tests.cpp | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/src/compiler/nir/tests/opt_loop_tests.cpp b/src/compiler/nir/tests/opt_loop_tests.cpp
index 0bbf1d043ba35..1fede9a5b49d4 100644
--- a/src/compiler/nir/tests/opt_loop_tests.cpp
+++ b/src/compiler/nir/tests/opt_loop_tests.cpp
@@ -28,7 +28,7 @@ protected:
    nir_opt_loop_test();
 
    nir_deref_instr *add_loop_terminators(nir_if **term1, nir_if **term2,
-                                         bool deref_array);
+                                         bool break_in_else, bool deref_array);
    void create_loop_phis(nir_loop *loop, nir_if *term1, nir_if *term2,
                          nir_def *def1, nir_def *def2);
 
@@ -52,12 +52,16 @@ nir_opt_loop_test::nir_opt_loop_test()
 
 nir_deref_instr *
 nir_opt_loop_test::add_loop_terminators(nir_if **term1, nir_if **term2,
-                                        bool deref_array)
+                                        bool break_in_else, bool deref_array)
 {
    /* Add first terminator */
    nir_def *one = nir_imm_int(b, 1);
    nir_def *cmp_result = nir_ieq(b, in_def, one);
    nir_if *nif = nir_push_if(b, cmp_result);
+
+   if (break_in_else)
+      nir_push_else(b, nif);
+
    nir_jump(b, nir_jump_break);
    nir_pop_if(b, nif);
 
@@ -77,6 +81,10 @@ nir_opt_loop_test::add_loop_terminators(nir_if **term1, nir_if **term2,
    nir_def *two = nir_imm_int(b, 2);
    nir_def *cmp_result2 = nir_ieq(b, ubo_def, two);
    nir_if *nif2 = nir_push_if(b, cmp_result2);
+
+   if (break_in_else)
+      nir_push_else(b, nif2);
+
    nir_jump(b, nir_jump_break);
    nir_pop_if(b, nif2);
 
@@ -107,7 +115,7 @@ TEST_F(nir_opt_loop_test, opt_loop_merge_terminators_deref_after_first_if)
     */
    nir_loop *loop = nir_push_loop(b);
 
-   nir_deref_instr *deref = add_loop_terminators(NULL, NULL, false);
+   nir_deref_instr *deref = add_loop_terminators(NULL, NULL, false, false);
 
    /* Load from deref that will be moved inside the continue branch of the
     * first if-statements continue block. If not handled correctly during
@@ -131,7 +139,7 @@ TEST_F(nir_opt_loop_test, opt_loop_merge_terminators_deref_phi_index)
     */
    nir_loop *loop = nir_push_loop(b);
 
-   nir_deref_instr *deref = add_loop_terminators(NULL, NULL, true);
+   nir_deref_instr *deref = add_loop_terminators(NULL, NULL, false, true);
 
    /* Load from deref that will be moved inside the continue branch of the
     * first if-statements continue block. If not handled correctly during
@@ -160,7 +168,7 @@ TEST_F(nir_opt_loop_test, opt_loop_merge_terminators_skip_merge_if_phis)
 
    nir_if *term1;
    nir_if *term2;
-   add_loop_terminators(&term1, &term2, false);
+   add_loop_terminators(&term1, &term2, false, false);
 
    nir_pop_loop(b, loop);
 
@@ -188,7 +196,7 @@ TEST_F(nir_opt_loop_test, opt_loop_merge_terminators_skip_merge_if_phis_nested_l
 
    nir_if *term1;
    nir_if *term2;
-   add_loop_terminators(&term1, &term2, false);
+   add_loop_terminators(&term1, &term2, false, false);
 
    nir_pop_loop(b, loop);
 
-- 
GitLab


From bb426b7f3c8bece76490737d21eeee4542979ad9 Mon Sep 17 00:00:00 2001
From: Timothy Arceri <tarceri@itsqueeze.com>
Date: Tue, 27 Aug 2024 11:08:23 +1000
Subject: [PATCH 2/2] nir/tests: add basic terminator merge test

Reviewed-by: Konstantin Seurer <konstantin.seurer@gmail.com>
Part-of: <https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/30862>
---
 src/compiler/nir/tests/opt_loop_tests.cpp | 33 +++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/src/compiler/nir/tests/opt_loop_tests.cpp b/src/compiler/nir/tests/opt_loop_tests.cpp
index 1fede9a5b49d4..e797adee1763f 100644
--- a/src/compiler/nir/tests/opt_loop_tests.cpp
+++ b/src/compiler/nir/tests/opt_loop_tests.cpp
@@ -31,6 +31,7 @@ protected:
                                          bool break_in_else, bool deref_array);
    void create_loop_phis(nir_loop *loop, nir_if *term1, nir_if *term2,
                          nir_def *def1, nir_def *def2);
+   void test_merged_if(bool break_in_else);
 
    nir_def *in_def;
    nir_variable *out_var;
@@ -108,6 +109,38 @@ nir_opt_loop_test::create_loop_phis(nir_loop *loop,
                     &phi_instr->instr);
 }
 
+void
+nir_opt_loop_test::test_merged_if(bool break_in_else)
+{
+   /* Tests that opt_loop_merge_terminators results in valid nir and that
+    * the test condition is correct based on the location of the break in
+    * the terminators.
+    */
+   nir_loop *loop = nir_push_loop(b);
+
+   nir_if *term1;
+   nir_if *term2;
+   add_loop_terminators(&term1, &term2, break_in_else, false);
+
+   nir_pop_loop(b, loop);
+
+   ASSERT_TRUE(nir_opt_loop(b->shader));
+
+   nir_validate_shader(b->shader, NULL);
+
+   nir_alu_instr *alu = nir_instr_as_alu(term2->condition.ssa->parent_instr);
+   if (break_in_else)
+      ASSERT_TRUE(alu->op == nir_op_iand);
+   else
+      ASSERT_TRUE(alu->op == nir_op_ior);
+}
+
+TEST_F(nir_opt_loop_test, opt_loop_merge_terminators_basic)
+{
+   test_merged_if(false);
+   test_merged_if(true);
+}
+
 TEST_F(nir_opt_loop_test, opt_loop_merge_terminators_deref_after_first_if)
 {
    /* Tests that opt_loop_merge_terminators creates valid nir after it merges
-- 
GitLab

